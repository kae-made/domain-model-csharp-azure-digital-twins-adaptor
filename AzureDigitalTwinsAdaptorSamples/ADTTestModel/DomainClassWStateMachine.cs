// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ADTTestModel
{
    public partial class DomainClassWStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            W1 = 0,     // Create
            W2 = 1,     // Start
            W3 = 2    // Done
        }

        public enum States
        {
            _NoState_ = 0,
            Created = 1,
            Working = 2,
            Completed = 3
        }

        public class W1_Create : EventData
        {
            DomainClassW reciever;

            public W1_Create(DomainClassW reciever) : base((int)Events.W1)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static W1_Create Create(DomainClassW receiver, bool sendNow, InstanceRepository instanceRepository, Logger logger)
            {
                var newEvent = new W1_Create(receiver);
                if (receiver == null && instanceRepository != null)
                {
                    receiver = DomainClassWBase.CreateInstance(instanceRepository, logger);
                }
                if (sendNow)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }
        }

        public class W2_Start : EventData
        {
            DomainClassW reciever;

            public W2_Start(DomainClassW reciever) : base((int)Events.W2)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static W2_Start Create(DomainClassW receiver, bool sendNow)
            {
                var newEvent = new W2_Start(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }

                return newEvent;
            }
        }

        public class W3_Done : EventData
        {
            DomainClassW reciever;

            public W3_Done(DomainClassW reciever) : base((int)Events.W3)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static W3_Done Create(DomainClassW receiver, bool sendNow)
            {
                var newEvent = new W3_Done(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }

                return newEvent;
            }
        }

        protected DomainClassW target;

        protected InstanceRepository instanceRepository;

        public DomainClassWStateMachine(DomainClassW target, InstanceRepository instanceRepository, Logger logger) : base(0, logger)
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

        protected int[,] stateTransitionTable = new int[3, 3]
            {
                { (int)ITransition.Transition.CantHappen, (int)States.Working, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)States.Completed }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:W(WId={target.Attr_WId}):entering[current={CurrentState},event={eventData.EventNumber}");


            changedStates = new List<ChangedState>();

            switch (nextState)
            {
            case (int)States.Created:
                ActionCreated();
                break;
            case (int)States.Working:
                ActionWorking();
                break;
            case (int)States.Completed:
                ActionCompleted();
                break;
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:W(WId={target.Attr_WId}):entered[current={CurrentState},event={eventData.EventNumber}");


            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
