// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ADTTestModel
{
    public partial class DomainClassLDStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            LD1 = 0,     // Measure
            LD2 = 1    // Measured
        }

        public enum States
        {
            _NoState_ = 0,
            WaitForMeasure = 1,
            Measured = 2
        }

        public class LD1_Measure : EventData
        {
            DomainClassLD reciever;

            public LD1_Measure(DomainClassLD reciever) : base((int)Events.LD1)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static LD1_Measure Create(DomainClassLD receiver, bool sendNow)
            {
                var newEvent = new LD1_Measure(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }

                return newEvent;
            }
        }

        public class LD2_Measured : EventData
        {
            DomainClassLD reciever;

            public LD2_Measured(DomainClassLD reciever) : base((int)Events.LD2)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static LD2_Measured Create(DomainClassLD receiver, bool sendNow)
            {
                var newEvent = new LD2_Measured(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }

                return newEvent;
            }
        }

        protected DomainClassLD target;

        protected InstanceRepository instanceRepository;

        public DomainClassLDStateMachine(DomainClassLD target, InstanceRepository instanceRepository, Logger logger) : base(1, logger)
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

        protected int[,] stateTransitionTable = new int[2, 2]
            {
                { (int)States.Measured, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)States.WaitForMeasure }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LD(LiefDeviceId={target.Attr_LiefDeviceId}):entering[current={CurrentState},event={eventData.EventNumber}");


            changedStates = new List<ChangedState>();

            switch (nextState)
            {
            case (int)States.WaitForMeasure:
                ActionWaitForMeasure();
                break;
            case (int)States.Measured:
                ActionMeasured();
                break;
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LD(LiefDeviceId={target.Attr_LiefDeviceId}):entered[current={CurrentState},event={eventData.EventNumber}");


            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
